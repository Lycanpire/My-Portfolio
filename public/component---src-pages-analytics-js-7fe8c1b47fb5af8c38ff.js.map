{"version":3,"file":"component---src-pages-analytics-js-7fe8c1b47fb5af8c38ff.js","mappings":"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","sources":["webpack://v4/./src/utils/analytics.js","webpack://v4/./src/components/AnalyticsDashboard.js","webpack://v4/./src/pages/analytics.js"],"sourcesContent":["// Google Analytics Data API utility\n// This uses a simpler approach compatible with Node.js 14\n\nconst GA4_ENDPOINT = 'https://analyticsdata.googleapis.com/v1beta/properties';\n\n// Function to format date for GA4 API\nconst formatDate = (date) => {\n  return date.toISOString().split('T')[0];\n};\n\n// Function to get date range (last 30 days)\nconst getDateRange = () => {\n  const endDate = new Date();\n  const startDate = new Date();\n  startDate.setDate(startDate.getDate() - 30);\n  \n  return {\n    startDate: formatDate(startDate),\n    endDate: formatDate(endDate)\n  };\n};\n\n// Mock function that simulates real GA4 data\n// In production, you would replace this with actual API calls\nexport const fetchAnalyticsData = async () => {\n  try {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const { startDate, endDate } = getDateRange();\n    \n    // Generate realistic mock data based on typical patterns\n    const baseVisitors = Math.floor(Math.random() * 500) + 200;\n    const totalVisitors = baseVisitors + Math.floor(Math.random() * 300);\n    const uniqueVisitors = Math.floor(totalVisitors * 0.7);\n    const pageViews = totalVisitors * (2 + Math.random() * 2);\n    \n    // Generate realistic page data\n    const pages = [\n      { page: '/', views: Math.floor(pageViews * 0.4) },\n      { page: '/about', views: Math.floor(pageViews * 0.2) },\n      { page: '/projects', views: Math.floor(pageViews * 0.25) },\n      { page: '/contact', views: Math.floor(pageViews * 0.1) },\n      { page: '/analytics', views: Math.floor(pageViews * 0.05) }\n    ];\n    \n    // Generate realistic traffic sources\n    const sources = [\n      { source: 'Direct', percentage: 35 + Math.random() * 20 },\n      { source: 'Google', percentage: 25 + Math.random() * 15 },\n      { source: 'Social Media', percentage: 10 + Math.random() * 10 },\n      { source: 'Referral', percentage: 5 + Math.random() * 10 },\n      { source: 'Other', percentage: 5 + Math.random() * 10 }\n    ];\n    \n    // Normalize percentages to sum to 100\n    const totalPercentage = sources.reduce((sum, source) => sum + source.percentage, 0);\n    sources.forEach(source => {\n      source.percentage = Math.round((source.percentage / totalPercentage) * 100);\n    });\n    \n    // Generate recent activity\n    const activities = [\n      { time: '2 minutes ago', action: 'Page view on /projects' },\n      { time: '5 minutes ago', action: 'Page view on /about' },\n      { time: '12 minutes ago', action: 'Page view on /' },\n      { time: '18 minutes ago', action: 'Page view on /contact' },\n      { time: '25 minutes ago', action: 'Page view on /projects' },\n      { time: '32 minutes ago', action: 'Page view on /' },\n      { time: '45 minutes ago', action: 'Page view on /about' },\n      { time: '1 hour ago', action: 'Page view on /contact' }\n    ];\n    \n    // Calculate average session duration\n    const avgMinutes = Math.floor(Math.random() * 3) + 1;\n    const avgSeconds = Math.floor(Math.random() * 60);\n    const averageSessionDuration = `${avgMinutes}m ${avgSeconds}s`;\n    \n    return {\n      totalVisitors: Math.round(totalVisitors),\n      uniqueVisitors: Math.round(uniqueVisitors),\n      pageViews: Math.round(pageViews),\n      averageSessionDuration,\n      topPages: pages.sort((a, b) => b.views - a.views),\n      trafficSources: sources,\n      recentActivity: activities,\n      dateRange: { startDate, endDate },\n      lastUpdated: new Date().toISOString()\n    };\n  } catch (error) {\n    console.error('Error fetching analytics data:', error);\n    throw new Error('Failed to load analytics data');\n  }\n};\n\n// Function to get real-time visitor count (simulated)\nexport const getRealTimeVisitors = async () => {\n  try {\n    // Simulate real-time data\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    const currentVisitors = Math.floor(Math.random() * 10) + 1;\n    const activePages = [\n      { page: '/', visitors: Math.floor(currentVisitors * 0.5) },\n      { page: '/projects', visitors: Math.floor(currentVisitors * 0.3) },\n      { page: '/about', visitors: Math.floor(currentVisitors * 0.2) }\n    ].filter(page => page.visitors > 0);\n    \n    return {\n      currentVisitors,\n      activePages,\n      timestamp: new Date().toISOString()\n    };\n  } catch (error) {\n    console.error('Error fetching real-time data:', error);\n    throw new Error('Failed to load real-time data');\n  }\n};\n\n// Function to format numbers with commas\nexport const formatNumber = (num) => {\n  return num.toLocaleString();\n};\n\n// Function to format time ago\nexport const formatTimeAgo = (timestamp) => {\n  const now = new Date();\n  const time = new Date(timestamp);\n  const diffInMinutes = Math.floor((now - time) / (1000 * 60));\n  \n  if (diffInMinutes < 1) return 'Just now';\n  if (diffInMinutes < 60) return `${diffInMinutes} minutes ago`;\n  \n  const diffInHours = Math.floor(diffInMinutes / 60);\n  if (diffInHours < 24) return `${diffInHours} hours ago`;\n  \n  const diffInDays = Math.floor(diffInHours / 24);\n  return `${diffInDays} days ago`;\n}; ","import React, { useState, useEffect } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { fetchAnalyticsData, getRealTimeVisitors, formatNumber, formatTimeAgo } from '../utils/analytics';\n\nconst fadeInUp = keyframes`\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`;\n\nconst pulse = keyframes`\n  0% { opacity: 1; }\n  50% { opacity: 0.5; }\n  100% { opacity: 1; }\n`;\n\nconst DashboardContainer = styled.div`\n  min-height: 100vh;\n  background: #0a192f;\n  padding: 2rem;\n  font-family: 'SF Mono', 'Fira Code', 'Roboto Mono', monospace;\n`;\n\nconst DashboardCard = styled.div`\n  background: #112240;\n  border-radius: 20px;\n  padding: 2rem;\n  margin-bottom: 2rem;\n  box-shadow: 0 8px 32px rgba(2, 12, 27, 0.7);\n  border: 1px solid #233554;\n  animation: ${fadeInUp} 0.5s ease-out;\n  animation-delay: ${props => props.delay || '0s'};\n  animation-fill-mode: both;\n`;\n\nconst Title = styled.h1`\n  color: #ccd6f6;\n  text-align: center;\n  margin-bottom: 2rem;\n  font-size: 2.5rem;\n  font-weight: 700;\n`;\n\nconst Subtitle = styled.p`\n  color: #8892b0;\n  text-align: center;\n  margin-bottom: 3rem;\n  font-size: 1rem;\n`;\n\nconst StatCard = styled.div`\n  background: linear-gradient(135deg, #64ffda 0%, rgba(100, 255, 218, 0.1) 100%);\n  color: #0a192f;\n  padding: 1.5rem;\n  border-radius: 15px;\n  margin: 1rem 0;\n  text-align: center;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  \n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 12px 40px rgba(2, 12, 27, 0.7);\n  }\n`;\n\nconst RealTimeCard = styled.div`\n  background: linear-gradient(135deg, #ff6b6b 0%, rgba(255, 107, 107, 0.1) 100%);\n  color: #0a192f;\n  padding: 1.5rem;\n  border-radius: 15px;\n  margin: 1rem 0;\n  text-align: center;\n  animation: ${pulse} 2s infinite;\n`;\n\nconst StatNumber = styled.div`\n  font-size: 2.5rem;\n  font-weight: bold;\n  margin-bottom: 0.5rem;\n`;\n\nconst StatLabel = styled.div`\n  font-size: 1rem;\n  opacity: 0.9;\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1.5rem;\n  margin-top: 2rem;\n`;\n\nconst LoadingSpinner = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n  color: #ccd6f6;\n  font-size: 1.2rem;\n`;\n\nconst ProgressBar = styled.div`\n  width: 100%;\n  height: 8px;\n  background-color: #233554;\n  border-radius: 4px;\n  overflow: hidden;\n  position: relative;\n  \n  &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: ${props => props.percentage}%;\n    background-color: #64ffda;\n    transition: width 0.5s ease-in-out;\n  }\n`;\n\nconst RefreshButton = styled.button`\n  background: #64ffda;\n  color: #0a192f;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 0.9rem;\n  margin-bottom: 1rem;\n  transition: all 0.3s ease;\n  \n  &:hover {\n    background: rgba(100, 255, 218, 0.8);\n  }\n`;\n\nconst LastUpdated = styled.div`\n  color: #8892b0;\n  font-size: 0.8rem;\n  text-align: center;\n  margin-top: 1rem;\n`;\n\nconst AnalyticsDashboard = () => {\n  const [analytics, setAnalytics] = useState(null);\n  const [realTimeData, setRealTimeData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n\n  const loadAnalytics = async () => {\n    try {\n      setLoading(true);\n      const data = await fetchAnalyticsData();\n      setAnalytics(data);\n      setLastUpdated(new Date());\n      setError(null);\n    } catch (err) {\n      setError('Failed to load analytics data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadRealTimeData = async () => {\n    try {\n      const data = await getRealTimeVisitors();\n      setRealTimeData(data);\n    } catch (err) {\n      console.error('Failed to load real-time data:', err);\n    }\n  };\n\n  useEffect(() => {\n    loadAnalytics();\n    loadRealTimeData();\n    \n    // Refresh real-time data every 30 seconds\n    const realTimeInterval = setInterval(loadRealTimeData, 30000);\n    \n    return () => clearInterval(realTimeInterval);\n  }, []);\n\n  if (loading) {\n    return (\n      <DashboardContainer>\n        <LoadingSpinner>Loading analytics dashboard...</LoadingSpinner>\n      </DashboardContainer>\n    );\n  }\n\n  if (error) {\n    return (\n      <DashboardContainer>\n        <DashboardCard>\n          <h2 style={{ color: '#e74c3c' }}>Error: {error}</h2>\n          <RefreshButton onClick={loadAnalytics}>Retry</RefreshButton>\n        </DashboardCard>\n      </DashboardContainer>\n    );\n  }\n\n  return (\n    <DashboardContainer>\n      <Title>Analytics Dashboard</Title>\n      <Subtitle>Last 30 days • Real-time data updates every 30 seconds</Subtitle>\n      \n      <DashboardCard delay=\"0s\">\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1.5rem' }}>\n          <h2 style={{ color: '#ccd6f6', margin: 0 }}>Overview</h2>\n          <RefreshButton onClick={loadAnalytics}>Refresh Data</RefreshButton>\n        </div>\n        <Grid>\n          <StatCard>\n            <StatNumber>{formatNumber(analytics.totalVisitors)}</StatNumber>\n            <StatLabel>Total Visitors</StatLabel>\n          </StatCard>\n          <StatCard>\n            <StatNumber>{formatNumber(analytics.uniqueVisitors)}</StatNumber>\n            <StatLabel>Unique Visitors</StatLabel>\n          </StatCard>\n          <StatCard>\n            <StatNumber>{formatNumber(analytics.pageViews)}</StatNumber>\n            <StatLabel>Page Views</StatLabel>\n          </StatCard>\n          <StatCard>\n            <StatNumber>{analytics.averageSessionDuration}</StatNumber>\n            <StatLabel>Avg. Session Duration</StatLabel>\n          </StatCard>\n        </Grid>\n        \n        {realTimeData && (\n          <div style={{ marginTop: '2rem' }}>\n            <RealTimeCard>\n              <StatNumber>{realTimeData.currentVisitors}</StatNumber>\n              <StatLabel>Currently Online</StatLabel>\n            </RealTimeCard>\n          </div>\n        )}\n      </DashboardCard>\n\n      <DashboardCard delay=\"0.1s\">\n        <h2 style={{ marginBottom: '1.5rem', color: '#ccd6f6' }}>Top Pages</h2>\n        {analytics.topPages.map((page, index) => (\n          <div key={index} style={{ \n            display: 'flex', \n            justifyContent: 'space-between', \n            padding: '0.5rem 0',\n            borderBottom: index < analytics.topPages.length - 1 ? '1px solid #233554' : 'none'\n          }}>\n            <span style={{ color: '#8892b0' }}>{page.page}</span>\n            <span style={{ fontWeight: 'bold', color: '#ccd6f6' }}>{formatNumber(page.views)} views</span>\n          </div>\n        ))}\n      </DashboardCard>\n\n      <DashboardCard delay=\"0.2s\">\n        <h2 style={{ marginBottom: '1.5rem', color: '#ccd6f6' }}>Traffic Sources</h2>\n        {analytics.trafficSources.map((source, index) => (\n          <div key={index} style={{ marginBottom: '1rem' }}>\n            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '0.5rem' }}>\n              <span style={{ color: '#8892b0' }}>{source.source}</span>\n              <span style={{ fontWeight: 'bold', color: '#ccd6f6' }}>{source.percentage}%</span>\n            </div>\n            <ProgressBar percentage={source.percentage} />\n          </div>\n        ))}\n      </DashboardCard>\n\n      <DashboardCard delay=\"0.3s\">\n        <h2 style={{ marginBottom: '1.5rem', color: '#ccd6f6' }}>Recent Activity</h2>\n        {analytics.recentActivity.map((activity, index) => (\n          <div key={index} style={{ \n            padding: '0.75rem 0',\n            borderBottom: index < analytics.recentActivity.length - 1 ? '1px solid #233554' : 'none'\n          }}>\n            <div style={{ color: '#495670', fontSize: '0.9rem' }}>{activity.time}</div>\n            <div style={{ color: '#ccd6f6', marginTop: '0.25rem' }}>{activity.action}</div>\n          </div>\n        ))}\n      </DashboardCard>\n\n      {lastUpdated && (\n        <LastUpdated>\n          Last updated: {formatTimeAgo(lastUpdated)}\n        </LastUpdated>\n      )}\n    </DashboardContainer>\n  );\n};\n\nexport default AnalyticsDashboard; ","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport AnalyticsDashboard from '../components/AnalyticsDashboard';\n\nconst PageContainer = styled.div`\n  min-height: 100vh;\n  background: #0a192f;\n  color: #ccd6f6;\n`;\n\nconst LoginContainer = styled.div`\n  min-height: 100vh;\n  background: #0a192f;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 2rem;\n`;\n\nconst LoginCard = styled.div`\n  background: #112240;\n  padding: 3rem;\n  border-radius: 20px;\n  box-shadow: 0 8px 32px rgba(2, 12, 27, 0.7);\n  border: 1px solid #233554;\n  max-width: 400px;\n  width: 100%;\n`;\n\nconst Title = styled.h1`\n  color: #ccd6f6;\n  text-align: center;\n  margin-bottom: 2rem;\n  font-size: 2rem;\n  font-weight: 700;\n`;\n\nconst Subtitle = styled.p`\n  color: #8892b0;\n  text-align: center;\n  margin-bottom: 2rem;\n  font-size: 0.9rem;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 1rem;\n  margin-bottom: 1rem;\n  border: 1px solid #233554;\n  border-radius: 8px;\n  background: #0a192f;\n  color: #ccd6f6;\n  font-size: 1rem;\n  \n  &:focus {\n    outline: none;\n    border-color: #64ffda;\n    box-shadow: 0 0 0 2px rgba(100, 255, 218, 0.2);\n  }\n  \n  &::placeholder {\n    color: #8892b0;\n  }\n`;\n\nconst Button = styled.button`\n  width: 100%;\n  padding: 1rem;\n  background: #64ffda;\n  color: #0a192f;\n  border: none;\n  border-radius: 8px;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  \n  &:hover {\n    background: rgba(100, 255, 218, 0.8);\n    transform: translateY(-2px);\n  }\n  \n  &:disabled {\n    background: #8892b0;\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n\nconst ErrorMessage = styled.div`\n  color: #e74c3c;\n  text-align: center;\n  margin-top: 1rem;\n  font-size: 0.9rem;\n`;\n\nconst SuccessMessage = styled.div`\n  color: #64ffda;\n  text-align: center;\n  margin-top: 1rem;\n  font-size: 0.9rem;\n`;\n\nconst AnalyticsPage = () => {\n  const [password, setPassword] = useState('');\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Get password from environment variable or use default\n  const ADMIN_PASSWORD = process.env.GATSBY_ANALYTICS_PASSWORD || 'admin123';\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n    setSuccess('');\n    \n    try {\n      // Simulate API call delay for better UX\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      if (password === ADMIN_PASSWORD) {\n        setIsAuthenticated(true);\n        setSuccess('Authentication successful!');\n        setError('');\n        \n        // Store authentication in session storage\n        sessionStorage.setItem('analytics_authenticated', 'true');\n        sessionStorage.setItem('analytics_auth_time', new Date().toISOString());\n      } else {\n        setError('Incorrect password. Please try again.');\n        setSuccess('');\n      }\n    } catch (err) {\n      setError('Authentication failed. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Check if user is already authenticated on component mount\n  React.useEffect(() => {\n    const isAuth = sessionStorage.getItem('analytics_authenticated');\n    const authTime = sessionStorage.getItem('analytics_auth_time');\n    \n    if (isAuth && authTime) {\n      // Check if authentication is still valid (24 hours)\n      const authDate = new Date(authTime);\n      const now = new Date();\n      const hoursDiff = (now - authDate) / (1000 * 60 * 60);\n      \n      if (hoursDiff < 24) {\n        setIsAuthenticated(true);\n      } else {\n        // Clear expired authentication\n        sessionStorage.removeItem('analytics_authenticated');\n        sessionStorage.removeItem('analytics_auth_time');\n      }\n    }\n  }, []);\n\n  const handleLogout = () => {\n    setIsAuthenticated(false);\n    setPassword('');\n    sessionStorage.removeItem('analytics_authenticated');\n    sessionStorage.removeItem('analytics_auth_time');\n  };\n\n  if (isAuthenticated) {\n    return (\n      <PageContainer>\n        <div style={{ \n          position: 'fixed', \n          top: '1rem', \n          right: '1rem', \n          zIndex: 1000 \n        }}>\n          <button\n            onClick={handleLogout}\n            style={{\n              background: 'rgba(255, 107, 107, 0.1)',\n              color: '#ff6b6b',\n              border: '1px solid #ff6b6b',\n              padding: '0.5rem 1rem',\n              borderRadius: '5px',\n              cursor: 'pointer',\n              fontSize: '0.8rem'\n            }}\n          >\n            Logout\n          </button>\n        </div>\n        <AnalyticsDashboard />\n      </PageContainer>\n    );\n  }\n\n  return (\n    <LoginContainer>\n      <LoginCard>\n        <Title>Analytics Access</Title>\n        <Subtitle>Enter your password to access the analytics dashboard</Subtitle>\n        <form onSubmit={handleSubmit}>\n          <Input\n            type=\"password\"\n            placeholder=\"Enter password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n            disabled={isLoading}\n          />\n          <Button type=\"submit\" disabled={isLoading}>\n            {isLoading ? 'Authenticating...' : 'Access Dashboard'}\n          </Button>\n        </form>\n        {error && <ErrorMessage>{error}</ErrorMessage>}\n        {success && <SuccessMessage>{success}</SuccessMessage>}\n        \n        <div style={{ \n          marginTop: '2rem', \n          padding: '1rem', \n          background: 'rgba(100, 255, 218, 0.1)', \n          borderRadius: '8px',\n          border: '1px solid rgba(100, 255, 218, 0.2)'\n        }}>\n          <p style={{ \n            color: '#64ffda', \n            fontSize: '0.8rem', \n            margin: 0,\n            textAlign: 'center'\n          }}>\n            💡 Tip: Set GATSBY_ANALYTICS_PASSWORD environment variable for production\n          </p>\n        </div>\n      </LoginCard>\n    </LoginContainer>\n  );\n};\n\nexport default AnalyticsPage; "],"names":["formatDate","date","toISOString","split","fetchAnalyticsData","async","Promise","resolve","setTimeout","startDate","endDate","getDateRange","Date","setDate","getDate","totalVisitors","Math","floor","random","uniqueVisitors","pageViews","pages","page","views","sources","source","percentage","totalPercentage","reduce","sum","forEach","round","activities","time","action","avgMinutes","averageSessionDuration","topPages","sort","a","b","trafficSources","recentActivity","dateRange","lastUpdated","error","console","Error","formatNumber","num","toLocaleString","fadeInUp","keyframes","pulse","DashboardContainer","styled","div","withConfig","displayName","componentId","DashboardCard","props","delay","Title","h1","Subtitle","p","StatCard","RealTimeCard","StatNumber","StatLabel","Grid","LoadingSpinner","ProgressBar","RefreshButton","button","LastUpdated","AnalyticsDashboard","analytics","setAnalytics","useState","realTimeData","setRealTimeData","loading","setLoading","setError","setLastUpdated","loadAnalytics","data","err","loadRealTimeData","currentVisitors","activePages","visitors","filter","timestamp","getRealTimeVisitors","useEffect","realTimeInterval","setInterval","clearInterval","React","style","color","onClick","display","justifyContent","alignItems","marginBottom","margin","marginTop","map","index","key","padding","borderBottom","length","fontWeight","activity","fontSize","now","diffInMinutes","diffInHours","formatTimeAgo","PageContainer","LoginContainer","LoginCard","Input","input","Button","ErrorMessage","SuccessMessage","AnalyticsPage","password","setPassword","isAuthenticated","setIsAuthenticated","success","setSuccess","isLoading","setIsLoading","ADMIN_PASSWORD","process","GATSBY_ANALYTICS_PASSWORD","isAuth","sessionStorage","getItem","authTime","authDate","removeItem","handleLogout","position","top","right","zIndex","background","border","borderRadius","cursor","onSubmit","e","preventDefault","setItem","type","placeholder","value","onChange","target","required","disabled","textAlign"],"sourceRoot":""}